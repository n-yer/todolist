{"version":3,"sources":["Task.js","Banner.js","Stats.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","className","completed","type","checked","onChange","handleChange","id","title","note","style","backgroundColor","priority","onClick","handleDeleteTask","Banner","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","day","getDay","parseInt","backgroundImage","bgImg","undefined","quote","author","Stats","useState","completedTasksTotal","ToDoList","downloadTxtFile","x","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","taskObjects","initialTasks","uploadErrorMsg","state","newTask","name","removeTask","tasks","map","todoItem","key","handleTaskChange","bind","randomQuote","uploadedTasks","fetch","then","response","json","data","setState","contents","quotes","i","length","sortedTaskObjects","this","push","console","log","taskArrayIndex","findTaskById","splice","maxid","taskobj","sortByUncompleted","getMaxId","prevState","e","input","target","reader","FileReader","onload","result","files","forceUpdate","readAsText","isValidTaskFormat","tasksArray","split","forEach","n","thisTask","value","tasksString","TextField","label","display","fullWidth","Button","width","marginLeft","variant","color","addNewTask","component","onUpload","importTasks","exportTasks","React","Component","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03d2282b.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\n\r\nfunction Task(props){\r\n\r\n\r\n\r\n    return(\r\n        <li className={props.completed ? \"task complete-task\" : \"task\"} >\r\n          <input type=\"checkbox\" className=\"task-checkbox\" checked={props.completed} onChange={()=>props.handleChange(props.id)} />\r\n          <div className=\"task-text\">\r\n            <p className=\"task-name\">{props.title}</p>\r\n            <p className=\"task-note\">{props.note}</p>\r\n          </div>\r\n          \r\n          <div className=\"priority-container\">\r\n              <span className=\"dot\" style={{backgroundColor: props.priority === \"High\" ? \"red\" : props.priority === \"Medium\" ? \"orange\" : \"green\"}}></span>\r\n              <p className=\"priority-text\">{props.priority} Priority</p>\r\n          </div>\r\n          <button className=\"delete-btn\" onClick={()=>props.handleDeleteTask(props.id)}>X</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Task","import React from \"react\"\r\n\r\nfunction Banner(props){\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = today.getFullYear();\r\n    var day = today.getDay();\r\n    var weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    var months = ['January', 'Febuary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n    today = months[parseInt(mm)-1] + ' ' + dd + ', ' + yyyy;\r\n    \r\n\r\n    return(\r\n        <div className=\"banner\" style={{backgroundImage:  \"linear-gradient(to right, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.4) 100%)\" + \",\" + props.bgImg }}>\r\n            <h1 className=\"date-today-lg\">{weekDays[day]}</h1>\r\n            <h1 className=\"date-today\">{today}</h1>\r\n            <div className=\"quote-container\">\r\n                <h1 className=\"quote\">{props.quote === undefined ? \"\" : \"\\\"\" + props.quote + \"\\\"\"}</h1>\r\n                <h2 className=\"quote-author\">{props.author}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner","import React, {useState, useEffect} from \"react\"\r\n\r\n\r\nfunction Stats(props){\r\n    const [completedTasksTotal, setCompletedTasksTotal] = useState(0)\r\n    /*function updateCompletedTasksCount(){\r\n        \r\n        props.tasks.forEach(task => {\r\n            if(task.completed)\r\n                setCompletedTasksTotal(completedTasksTotal+1)\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"useeffect tasks\" , props.tasks)\r\n        props.tasks.forEach((task, i) => {\r\n            console.log(\"TASK \"+ i, task.props.completed)\r\n            if(task.props.completed\r\n                )\r\n                setCompletedTasksTotal(completedTasksTotal+1)\r\n        });\r\n    })*/\r\n    return(\r\n    <div className=\"stats-container\">\r\n        <p>Completed tasks: {props.completedTasksTotal}</p>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Stats","import React from \"react\"\r\nimport Task from \"./Task\"\r\nimport Banner from \"./Banner\"\r\nimport Stats from \"./Stats\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Select from '@material-ui/core/Select'\r\nclass ToDoList extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n  \r\n     \r\n      \r\n    this.taskObjects = this.props.initialTasks\r\n    this.uploadErrorMsg = \"\"\r\n     \r\n      this.state = {\r\n        newTask : {\r\n            name: \"\",\r\n            priority: \"Low\",\r\n            note: \"\"\r\n        },\r\n        removeTask: \"\",\r\n        tasks : this.taskObjects.map(todoItem => <Task \r\n            key={todoItem.id} \r\n            id={todoItem.id} \r\n            title={todoItem.name} \r\n            completed={todoItem.completed} \r\n            priority={todoItem.priority} \r\n            note={todoItem.note} \r\n            handleChange={this.handleTaskChange.bind(this)} \r\n            handleDeleteTask={this.handleDeleteTask.bind(this)}/>),\r\n        randomQuote: {},\r\n        completedTasksTotal: 0,\r\n        uploadedTasks: \"\"\r\n      }\r\n      \r\n     \r\n      \r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://quotes.rest/qod?language=en\").then(\r\n            response => response.json())\r\n            .then(data => {this.setState({randomQuote: {quote: data.contents.quotes[0].quote, author: data.contents.quotes[0].author}})})\r\n        \r\n    }\r\n    \r\n    findTaskById(taskObjects, id){\r\n        for(var i=0; i< taskObjects.length; i++){\r\n            if(taskObjects[i].id === id){\r\n                return i\r\n            }\r\n        }\r\n\r\n        return -1\r\n    }\r\n\r\n    sortByUncompleted(){\r\n\r\n       \r\n        let sortedTaskObjects = []\r\n        \r\n        for(var i=0; i< this.taskObjects.length; i++){\r\n            if(!this.taskObjects[i].completed)\r\n                sortedTaskObjects.push(this.taskObjects[i])\r\n        }\r\n        \r\n        for(i=0; i< this.taskObjects.length; i++){\r\n            if(this.taskObjects[i].completed)\r\n                sortedTaskObjects.push(this.taskObjects[i])\r\n        }\r\n\r\n        this.taskObjects = sortedTaskObjects\r\n        console.log(this.taskObjects)\r\n        this.setState({tasks : this.taskObjects.map((todoItem, i) => <Task \r\n            key={todoItem.id} \r\n            id={todoItem.id} \r\n            title={todoItem.name} \r\n            completed={todoItem.completed} \r\n            priority={todoItem.priority} \r\n            note={todoItem.note} \r\n            handleChange={this.handleTaskChange.bind(this)} \r\n            handleDeleteTask={this.handleDeleteTask.bind(this)}/>)})\r\n            //update array of tasks in parent\r\n            this.props.onChange(this.taskObjects)\r\n    }\r\n    handleTaskChange(id){\r\n        \r\n        //get task id\r\n        const taskArrayIndex = this.findTaskById(this.taskObjects, id)\r\n\r\n        //set task completed or not \r\n        this.taskObjects[taskArrayIndex].completed = !this.taskObjects[taskArrayIndex].completed\r\n\r\n        //add or subtract total completed tasks\r\n        this.taskObjects[taskArrayIndex].completed ? this.setState({completedTasksTotal: this.state.completedTasksTotal+1}) : this.setState({completedTasksTotal: this.state.completedTasksTotal-1})\r\n\r\n        console.log(this.taskObjects[taskArrayIndex])\r\n        this.setState({\r\n            tasks : this.taskObjects.map(todoItem => <Task \r\n                key={todoItem.id} \r\n                id={todoItem.id} \r\n                title={todoItem.name} \r\n                completed={todoItem.completed} \r\n                priority={todoItem.priority} \r\n                note={todoItem.note} \r\n                handleChange={this.handleTaskChange.bind(this)} \r\n                handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n        })\r\n        //update array of tasks in parent\r\n        this.props.onChange(this.taskObjects)\r\n\r\n    }\r\n    handleDeleteTask(id){\r\n        \r\n        //get array index of task to be deleted\r\n        const taskArrayIndex = this.findTaskById(this.taskObjects, id)\r\n        //remove the task from tasks array\r\n        this.taskObjects.splice(taskArrayIndex, 1)\r\n        //set state with the updated tasks\r\n        this.setState({\r\n            tasks : this.taskObjects.map(todoItem => <Task \r\n                key={todoItem.id} id={todoItem.id} \r\n                title={todoItem.name} \r\n                completed={todoItem.completed} \r\n                priority={todoItem.priority} \r\n                note={todoItem.note} \r\n                handleChange={this.handleTaskChange.bind(this)} \r\n                handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n        })\r\n        //update array of tasks in parent\r\n        this.props.onChange(this.taskObjects)\r\n    }\r\n    getMaxId(){\r\n        let maxid = -1;\r\n        this.taskObjects.map(taskobj => {\r\n            taskobj.id > maxid ? maxid = taskobj.id : maxid = maxid\r\n        })\r\n        return(maxid)\r\n    }\r\n    addNewTask(){\r\n       this.sortByUncompleted()\r\n        if(this.state.newTask.name !== \"\"){\r\n          this.taskObjects.push({\r\n              name: this.state.newTask.name,\r\n              id: this.taskObjects.length === 0 ? 1 : this.getMaxId() + 1,\r\n              completed: false,\r\n              priority: this.state.newTask.priority,\r\n              note: this.state.newTask.note\r\n          })\r\n          console.log(this.taskObjects)\r\n\r\n          //update array of tasks in parent\r\n          this.props.onChange(this.taskObjects)\r\n\r\n          this.setState(prevState => ({\r\n            newTask : {\r\n                name: \"\",\r\n                priority: prevState.newTask.priority,\r\n                note: \"\"\r\n            },\r\n            tasks : this.taskObjects.map(todoItem => <Task \r\n                key={todoItem.id} \r\n                id={todoItem.id} \r\n                title={todoItem.name} \r\n                completed={todoItem.completed} \r\n                priority={todoItem.priority} \r\n                note={todoItem.note} \r\n                handleChange={this.handleTaskChange.bind(this)} \r\n                handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n        }))\r\n            \r\n        }\r\n         \r\n    }\r\n    onUpload(e) {\r\n        var input = e.target;\r\n        \r\n        var reader = new FileReader();\r\n        reader.onload = function(){\r\n            var text = reader.result;\r\n            \r\n            this.setState({uploadedTasks: reader.result})\r\n            this.uploadErrorMsg = input.files[0].name\r\n            this.forceUpdate()\r\n        }.bind(this);\r\n        reader.readAsText(input.files[0]);\r\n        \r\n        \r\n    }\r\n    isValidTaskFormat(tasks){\r\n        \r\n        if(tasks===\"\")\r\n            return false\r\n            \r\n        if(tasks[tasks.length-1]!==\"|\")\r\n            return false\r\n        \r\n        return true\r\n    }   \r\n    importTasks(e){\r\n       \r\n        if(this.isValidTaskFormat(this.state.uploadedTasks)){      \r\n            var tasksArray = this.state.uploadedTasks.split(\"\\n\")\r\n            console.log(tasksArray)\r\n            tasksArray.forEach((n, i) => {\r\n            let thisTask = n.split(\"|\")\r\n            this.taskObjects.push({\r\n                name: thisTask[0],\r\n                id: this.taskObjects.length === 0 ? 1 : this.getMaxId() + 1,\r\n                completed: false,\r\n                priority: thisTask[1],\r\n                note: thisTask[2] \r\n            })\r\n            \r\n            //update array of tasks in parent\r\n            this.props.onChange(this.taskObjects)\r\n    \r\n            this.setState(prevState => ({\r\n              newTask : {\r\n                  name: \"\",\r\n                  priority: prevState.newTask.priority,\r\n                  note: \"\"\r\n              },\r\n                tasks : this.taskObjects.map(todoItem => <Task \r\n                  key={todoItem.id} \r\n                  id={todoItem.id} \r\n                  title={todoItem.name} \r\n                  completed={todoItem.completed} \r\n                  priority={todoItem.priority} \r\n                  note={todoItem.note} \r\n                  handleChange={this.handleTaskChange.bind(this)} \r\n                  handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n            }))\r\n            })\r\n            this.uploadErrorMsg = \"\"\r\n            e.target.value = ' ';\r\n        }\r\n        else{\r\n            this.uploadErrorMsg = \"Choose a valid txt file\"\r\n            e.target.value = ' ';\r\n            this.forceUpdate()\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n    exportTasks(){\r\n        \r\n        var tasksString = \"\"\r\n        \r\n        this.state.tasks.forEach((n,i)=>{\r\n            \r\n            tasksString+=n.props.title+\"|\"\r\n            tasksString+=n.props.priority+\"|\"\r\n            tasksString+=n.props.note+\"|\"\r\n            i < this.state.tasks.length-1 ? tasksString+=\"\\n\" : tasksString+=\"\"\r\n            \r\n\r\n        })\r\n        \r\n        \r\n       this.downloadTxtFile(tasksString)\r\n    }\r\n    downloadTxtFile = (x) => {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([\r\n           x\r\n        ], {type: 'text/plain'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"myTasks.txt\";\r\n        document.body.appendChild(element); // Required for FireFox\r\n        element.click();\r\n      }\r\n    render(){\r\n        return(\r\n            \r\n\r\n                <div className=\"main\">\r\n                    <Banner quote={this.state.randomQuote.quote} author={this.state.randomQuote.author} bgImg={\"url('https://source.unsplash.com/1600x800/?nature')\"} />\r\n\r\n                    <div className=\"add-task-container\">\r\n                        \r\n                        <TextField label=\"New Task Title\" style={{display: \"block\"}} fullWidth={true} onChange={(e) => {this.setState({newTask: {...this.state.newTask, name: e.target.value}})}} value={this.state.newTask.name}></TextField>\r\n                        \r\n                        <TextField label=\"Notes\" fullWidth={true} onChange={(e) => {this.setState({newTask: {...this.state.newTask, note: e.target.value}})}} value={this.state.newTask.note} ></TextField>\r\n                       \r\n                        <div className=\"priority-select-container\">\r\n                            <p>Priority</p>\r\n                            \r\n                            <select name=\"priority\" id=\"new-task-priority\" className=\"select-priority\" onChange={(e) => {this.setState({newTask: {...this.state.newTask, priority: e.target.value}})}}>\r\n                                <option value=\"Low\">Low</option>\r\n                                <option value=\"Medium\">Medium</option>\r\n                                <option value=\"High\">High</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <Button style={{display: \"block\", width: \"30%\", marginLeft: \"70%\"}} variant=\"contained\" color=\"primary\" onClick={this.addNewTask.bind(this)}>Add Task</Button>\r\n                        \r\n                        <Button\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                        style={{width: \"30%\"}}\r\n                        >\r\n                        {this.uploadErrorMsg === \"\"? \"Choose File\":this.uploadErrorMsg}\r\n                        <input style={{display: \"none\"}} type=\"file\" id=\"fileInput\" onChange={this.onUpload.bind(this)} />\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.importTasks.bind(this)}>Import Tasks</Button>\r\n                        <Button style={{display: \"block\", width: \"30%\", marginLeft: \"70%\"}} variant=\"contained\" color=\"primary\" onClick={this.exportTasks.bind(this)}>Export Tasks</Button>\r\n                    </div>\r\n                    <div className=\"task-list\">\r\n                        \r\n                        {this.taskObjects.length === 0 ? <h1>Add some tasks to get started!</h1> : this.state.tasks}\r\n                    </div>\r\n                    <Stats completedTasksTotal={this.state.completedTasksTotal} tasks={this.state.tasks}/>\r\n                </div>\r\n                \r\n            \r\n            \r\n        )\r\n    }\r\n\r\n    \r\n  }\r\n\r\nexport default ToDoList","import React from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\"\r\nimport Stats from \"./Stats\"\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  var taskObjects = [/*\r\n    {\r\n        name: \"do the dishes\",\r\n        id: 0,\r\n        completed: false,\r\n        priority: \"Low\",\r\n        note: \"dry them too\"\r\n    }, \r\n    {\r\n        name: \"pick up groceries\",\r\n        id: 1,\r\n        completed: false,\r\n        priority: \"Medium\",\r\n        note: \"dont forget avocados\"\r\n    },\r\n    {\r\n        name: \"learn react\",\r\n        id: 2,\r\n        completed: false,\r\n        priority: \"High\",\r\n        note: \"chapter 10\"\r\n    },\r\n    {\r\n      name: \"learn guitar\",\r\n      id: 3,\r\n      completed: false,\r\n      priority: \"Medium\",\r\n      note: \"Part 3\"\r\n  }\r\n  */\r\n]\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Router>\r\n        <Link to=\"/\"></Link>\r\n        \r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <ToDoList initialTasks={taskObjects} onChange={(tasks) => {taskObjects = tasks;\r\n            console.log(\"task objects from app.js: \" ,taskObjects)}}/>\r\n          </Route>\r\n          \r\n        </Switch>\r\n      </Router>\r\n      \r\n    </div>\r\n    /*\r\n    <div className=\"App\">\r\n      <ToDoList initialTasks={taskObjects} onChange={(tasks) => {taskObjects = tasks;\r\n      console.log(\"task objects from app.js: \" ,taskObjects)}}/>\r\n    </div>\r\n    */\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}