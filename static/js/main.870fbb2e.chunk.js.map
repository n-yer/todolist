{"version":3,"sources":["Task.js","Banner.js","ToDoList.js","Stats.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","className","completed","type","checked","onChange","handleChange","id","title","note","style","backgroundColor","priority","onClick","handleDeleteTask","Banner","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","backgroundImage","bgImg","undefined","quote","author","ToDoList","taskObjects","initialTasks","state","newTask","name","removeTask","tasks","map","todoItem","key","handleTaskChange","bind","randomQuote","fetch","then","response","json","data","setState","contents","quotes","i","length","sortedTaskObjects","this","push","console","log","taskArrayIndex","findTaskById","splice","sortByUncompleted","prevState","e","target","value","placeholder","addNewTask","React","Component","Stats","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4RAyBeA,MArBf,SAAcC,GAIV,OACI,wBAAIC,UAAWD,EAAME,UAAY,qBAAuB,QACtD,2BAAOC,KAAK,WAAWF,UAAU,gBAAgBG,QAASJ,EAAME,UAAWG,SAAU,kBAAIL,EAAMM,aAAaN,EAAMO,OAClH,yBAAKN,UAAU,aACb,uBAAGA,UAAU,aAAaD,EAAMQ,OAChC,uBAAGP,UAAU,aAAaD,EAAMS,OAGlC,yBAAKR,UAAU,sBACX,0BAAMA,UAAU,MAAMS,MAAO,CAACC,gBAAoC,SAAnBX,EAAMY,SAAsB,MAA2B,WAAnBZ,EAAMY,SAAwB,SAAW,WAC5H,uBAAGX,UAAU,iBAAiBD,EAAMY,SAApC,cAEJ,4BAAQX,UAAU,aAAaY,QAAS,kBAAIb,EAAMc,iBAAiBd,EAAMO,MAAzE,OCEKQ,MApBf,SAAgBf,GACZ,IAAIgB,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cAKjB,OAHAT,EAAQM,EAAK,IAAMJ,EAAK,IAAMM,EAI1B,yBAAKvB,UAAU,SAASS,MAAO,CAACgB,gBAAkB,uEAA8E1B,EAAM2B,QAClI,4BAAKX,GACL,yBAAKf,UAAU,mBACX,wBAAIA,UAAU,cAAyB2B,IAAhB5B,EAAM6B,MAAsB,GAAK,IAAO7B,EAAM6B,MAAQ,KAC7E,wBAAI5B,UAAU,gBAAgBD,EAAM8B,WC8MrCC,E,YAxNX,WAAY/B,GAAO,IAAD,8BAChB,4CAAMA,KA2BHgC,YAAc,EAAKhC,MAAMiC,aAG5B,EAAKC,MAAQ,CACXC,QAAU,CACNC,KAAM,GACNxB,SAAU,MACVH,KAAM,IAEV4B,WAAY,GACZC,MAAQ,EAAKN,YAAYO,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CACrCC,IAAKD,EAASjC,GACdA,GAAIiC,EAASjC,GACbC,MAAOgC,EAASJ,KAChBlC,UAAWsC,EAAStC,UACpBU,SAAU4B,EAAS5B,SACnBH,KAAM+B,EAAS/B,KACfH,aAAc,EAAKoC,iBAAiBC,KAAtB,gBACd7B,iBAAkB,EAAKA,iBAAiB6B,KAAtB,qBACtBC,YAAa,IA/CC,E,iFAuDE,IAAD,OACfC,MAAM,uCAAuCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAS,EAAKC,SAAS,CAACN,YAAa,CAACf,MAAOoB,EAAKE,SAASC,OAAO,GAAGvB,MAAOC,OAAQmB,EAAKE,SAASC,OAAO,GAAGtB,e,mCAIvLE,EAAazB,GACtB,IAAI,IAAI8C,EAAE,EAAGA,EAAGrB,EAAYsB,OAAQD,IAChC,GAAGrB,EAAYqB,GAAG9C,KAAOA,EACrB,OAAO8C,EAIf,OAAQ,I,0CAQR,IALgB,IAAD,OAGXE,EAAoB,GAEhBF,EAAE,EAAGA,EAAGG,KAAKxB,YAAYsB,OAAQD,IACjCG,KAAKxB,YAAYqB,GAAGnD,WACpBqD,EAAkBE,KAAKD,KAAKxB,YAAYqB,IAGhD,IAAQA,EAAE,EAAGA,EAAGG,KAAKxB,YAAYsB,OAAQD,IAClCG,KAAKxB,YAAYqB,GAAGnD,WACnBqD,EAAkBE,KAAKD,KAAKxB,YAAYqB,IAGhDG,KAAKxB,YAAcuB,EACnBG,QAAQC,IAAIH,KAAKxB,aACjBwB,KAAKN,SAAS,CAACZ,MAAQkB,KAAKxB,YAAYO,KAAI,SAACC,EAAUa,GAAX,OAAiB,kBAAC,EAAD,CACzDZ,IAAKD,EAASjC,GACdA,GAAIiC,EAASjC,GACbC,MAAOgC,EAASJ,KAChBlC,UAAWsC,EAAStC,UACpBU,SAAU4B,EAAS5B,SACnBH,KAAM+B,EAAS/B,KACfH,aAAc,EAAKoC,iBAAiBC,KAAK,GACzC7B,iBAAkB,EAAKA,iBAAiB6B,KAAK,UAE7Ca,KAAKxD,MAAMK,SAASmD,KAAKxB,e,uCAEhBzB,GAAI,IAAD,OAGVqD,EAAiBJ,KAAKK,aAAaL,KAAKxB,YAAazB,GAE3DiD,KAAKxB,YAAY4B,GAAgB1D,WAAasD,KAAKxB,YAAY4B,GAAgB1D,UAC/EwD,QAAQC,IAAIH,KAAKxB,YAAY4B,IAC7BJ,KAAKN,SAAS,CACVZ,MAAQkB,KAAKxB,YAAYO,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CACrCC,IAAKD,EAASjC,GACdA,GAAIiC,EAASjC,GACbC,MAAOgC,EAASJ,KAChBlC,UAAWsC,EAAStC,UACpBU,SAAU4B,EAAS5B,SACnBH,KAAM+B,EAAS/B,KACfH,aAAc,EAAKoC,iBAAiBC,KAAK,GACzC7B,iBAAkB,EAAKA,iBAAiB6B,KAAK,UAGrDa,KAAKxD,MAAMK,SAASmD,KAAKxB,e,uCAGZzB,GAAI,IAAD,OAGVqD,EAAiBJ,KAAKK,aAAaL,KAAKxB,YAAazB,GAE3DiD,KAAKxB,YAAY8B,OAAOF,EAAgB,GAExCJ,KAAKN,SAAS,CACVZ,MAAQkB,KAAKxB,YAAYO,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CACrCC,IAAKD,EAASjC,GAAIA,GAAIiC,EAASjC,GAC/BC,MAAOgC,EAASJ,KAChBlC,UAAWsC,EAAStC,UACpBU,SAAU4B,EAAS5B,SACnBH,KAAM+B,EAAS/B,KACfH,aAAc,EAAKoC,iBAAiBC,KAAK,GACzC7B,iBAAkB,EAAKA,iBAAiB6B,KAAK,UAGrDa,KAAKxD,MAAMK,SAASmD,KAAKxB,e,mCAEhB,IAAD,OACTwB,KAAKO,oBAC2B,KAA5BP,KAAKtB,MAAMC,QAAQC,OACpBoB,KAAKxB,YAAYyB,KAAK,CAClBrB,KAAMoB,KAAKtB,MAAMC,QAAQC,KACzB7B,GAAgC,IAA5BiD,KAAKxB,YAAYsB,OAAe,EAAIE,KAAKxB,YAAYwB,KAAKxB,YAAYsB,OAAO,GAAG/C,GAAK,EACzFL,WAAW,EACXU,SAAU4C,KAAKtB,MAAMC,QAAQvB,SAC7BH,KAAM+C,KAAKtB,MAAMC,QAAQ1B,OAE7BiD,QAAQC,IAAIH,KAAKxB,aAGjBwB,KAAKxD,MAAMK,SAASmD,KAAKxB,aAEzBwB,KAAKN,UAAS,SAAAc,GAAS,MAAK,CAC1B7B,QAAU,CACNC,KAAM,GACNxB,SAAUoD,EAAU7B,QAAQvB,SAC5BH,KAAM,IAEV6B,MAAQ,EAAKN,YAAYO,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CACrCC,IAAKD,EAASjC,GACdA,GAAIiC,EAASjC,GACbC,MAAOgC,EAASJ,KAChBlC,UAAWsC,EAAStC,UACpBU,SAAU4B,EAAS5B,SACnBH,KAAM+B,EAAS/B,KACfH,aAAc,EAAKoC,iBAAiBC,KAAK,GACzC7B,iBAAkB,EAAKA,iBAAiB6B,KAAK,e,+BAMhD,IAAD,OACJ,OAGQ,yBAAK1C,UAAU,QACX,kBAAC,EAAD,CAAQ4B,MAAO2B,KAAKtB,MAAMU,YAAYf,MAAOC,OAAQ0B,KAAKtB,MAAMU,YAAYd,OAAQH,MAAO,wDAE3F,yBAAK1B,UAAU,sBAEX,2BAAOI,SAAU,SAAC4D,GAAO,EAAKf,SAAS,CAACf,QAAQ,eAAK,EAAKD,MAAMC,QAAjB,CAA0BC,KAAM6B,EAAEC,OAAOC,WAAWA,MAAOX,KAAKtB,MAAMC,QAAQC,KAAMgC,YAAY,oBAC/I,yBAAKnE,UAAU,kBACX,oCACA,2BAAOE,KAAK,OAAOE,SAAU,SAAC4D,GAAO,EAAKf,SAAS,CAACf,QAAQ,eAAK,EAAKD,MAAMC,QAAjB,CAA0B1B,KAAMwD,EAAEC,OAAOC,WAAWA,MAAOX,KAAKtB,MAAMC,QAAQ1B,KAAM2D,YAAY,sBAE/J,yBAAKnE,UAAU,6BACX,uCACA,4BAAQmC,KAAK,WAAW7B,GAAG,oBAAoBN,UAAU,kBAAkBI,SAAU,SAAC4D,GAAO,EAAKf,SAAS,CAACf,QAAQ,eAAK,EAAKD,MAAMC,QAAjB,CAA0BvB,SAAUqD,EAAEC,OAAOC,YAC5J,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,UAIR,4BAAQlE,UAAU,cAAcY,QAAS2C,KAAKa,WAAW1B,KAAKa,OAA9D,aAEJ,yBAAKvD,UAAU,aAEkB,IAA5BuD,KAAKxB,YAAYsB,OAAe,8DAA0CE,KAAKtB,MAAMI,Y,GA5MvFgC,IAAMC,WCGdC,MALf,WAEI,OAAO,sC,cCgEIC,MAvDf,WAEE,IAAIzC,EAAc,CAChB,CACII,KAAM,gBACN7B,GAAI,EACJL,WAAW,EACXU,SAAU,MACVH,KAAM,gBAEV,CACI2B,KAAM,oBACN7B,GAAI,EACJL,WAAW,EACXU,SAAU,SACVH,KAAM,wBAEV,CACI2B,KAAM,cACN7B,GAAI,EACJL,WAAW,EACXU,SAAU,OACVH,KAAM,cAEV,CACE2B,KAAM,eACN7B,GAAI,EACJL,WAAW,EACXU,SAAU,SACVH,KAAM,WAKV,OACE,yBAAKR,UAAU,OAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMyE,GAAG,MACT,kBAAC,IAAD,CAAMA,GAAG,WACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAU3C,aAAcD,EAAa3B,SAAU,SAACiC,GAAWN,EAAcM,EACzEoB,QAAQC,IAAI,6BAA8B3B,OAE5C,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,WChDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.870fbb2e.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\n\r\nfunction Task(props){\r\n\r\n\r\n\r\n    return(\r\n        <li className={props.completed ? \"task complete-task\" : \"task\"} >\r\n          <input type=\"checkbox\" className=\"task-checkbox\" checked={props.completed} onChange={()=>props.handleChange(props.id)} />\r\n          <div className=\"task-text\">\r\n            <p className=\"task-name\">{props.title}</p>\r\n            <p className=\"task-note\">{props.note}</p>\r\n          </div>\r\n          \r\n          <div className=\"priority-container\">\r\n              <span className=\"dot\" style={{backgroundColor: props.priority === \"High\" ? \"red\" : props.priority === \"Medium\" ? \"orange\" : \"green\"}}></span>\r\n              <p className=\"priority-text\">{props.priority} Priority</p>\r\n          </div>\r\n          <button className=\"delete-btn\" onClick={()=>props.handleDeleteTask(props.id)}>X</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Task","import React from \"react\"\r\n\r\nfunction Banner(props){\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n\r\n    today = mm + '/' + dd + '/' + yyyy;\r\n    \r\n\r\n    return(\r\n        <div className=\"banner\" style={{backgroundImage:  \"linear-gradient(to right, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.4) 100%)\" + \",\" + props.bgImg }}>\r\n            <h1>{today}</h1>\r\n            <div className=\"quote-container\">\r\n                <h1 className=\"quote\">{props.quote === undefined ? \"\" : \"\\\"\" + props.quote + \"\\\"\"}</h1>\r\n                <h2 className=\"quote-author\">{props.author}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner","import React from \"react\"\r\nimport Task from \"./Task\"\r\nimport Banner from \"./Banner\"\r\n\r\n\r\nclass ToDoList extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n  \r\n     /* \r\n      this.taskObjects = [\r\n        {\r\n            name: \"do the dishes\",\r\n            id: 0,\r\n            completed: false,\r\n            priority: \"Low\",\r\n            note: \"dry them too\"\r\n        }, \r\n        {\r\n            name: \"pick up groceries\",\r\n            id: 1,\r\n            completed: false,\r\n            priority: \"Medium\",\r\n            note: \"dont forget avocados\"\r\n        },\r\n        {\r\n            name: \"learn react\",\r\n            id: 2,\r\n            completed: false,\r\n            priority: \"High\",\r\n            note: \"chapter 10\"\r\n        }\r\n    ]*/\r\n      \r\n    this.taskObjects = this.props.initialTasks\r\n    \r\n     \r\n      this.state = {\r\n        newTask : {\r\n            name: \"\",\r\n            priority: \"Low\",\r\n            note: \"\"\r\n        },\r\n        removeTask: \"\",\r\n        tasks : this.taskObjects.map(todoItem => <Task \r\n            key={todoItem.id} \r\n            id={todoItem.id} \r\n            title={todoItem.name} \r\n            completed={todoItem.completed} \r\n            priority={todoItem.priority} \r\n            note={todoItem.note} \r\n            handleChange={this.handleTaskChange.bind(this)} \r\n            handleDeleteTask={this.handleDeleteTask.bind(this)}/>),\r\n        randomQuote: {}\r\n      }\r\n      \r\n     \r\n      \r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://quotes.rest/qod?language=en\").then(response => response.json()).then(data => {this.setState({randomQuote: {quote: data.contents.quotes[0].quote, author: data.contents.quotes[0].author}})})\r\n        \r\n    }\r\n    \r\n    findTaskById(taskObjects, id){\r\n        for(var i=0; i< taskObjects.length; i++){\r\n            if(taskObjects[i].id === id){\r\n                return i\r\n            }\r\n        }\r\n\r\n        return -1\r\n    }\r\n\r\n    sortByUncompleted(){\r\n\r\n       \r\n        let sortedTaskObjects = []\r\n        \r\n        for(var i=0; i< this.taskObjects.length; i++){\r\n            if(!this.taskObjects[i].completed)\r\n                sortedTaskObjects.push(this.taskObjects[i])\r\n        }\r\n        \r\n        for(var i=0; i< this.taskObjects.length; i++){\r\n            if(this.taskObjects[i].completed)\r\n                sortedTaskObjects.push(this.taskObjects[i])\r\n        }\r\n\r\n        this.taskObjects = sortedTaskObjects\r\n        console.log(this.taskObjects)\r\n        this.setState({tasks : this.taskObjects.map((todoItem, i) => <Task \r\n            key={todoItem.id} \r\n            id={todoItem.id} \r\n            title={todoItem.name} \r\n            completed={todoItem.completed} \r\n            priority={todoItem.priority} \r\n            note={todoItem.note} \r\n            handleChange={this.handleTaskChange.bind(this)} \r\n            handleDeleteTask={this.handleDeleteTask.bind(this)}/>)})\r\n            //update array of tasks in parent\r\n            this.props.onChange(this.taskObjects)\r\n    }\r\n    handleTaskChange(id){\r\n        \r\n\r\n        const taskArrayIndex = this.findTaskById(this.taskObjects, id)\r\n        \r\n        this.taskObjects[taskArrayIndex].completed = !this.taskObjects[taskArrayIndex].completed\r\n        console.log(this.taskObjects[taskArrayIndex])\r\n        this.setState({\r\n            tasks : this.taskObjects.map(todoItem => <Task \r\n                key={todoItem.id} \r\n                id={todoItem.id} \r\n                title={todoItem.name} \r\n                completed={todoItem.completed} \r\n                priority={todoItem.priority} \r\n                note={todoItem.note} \r\n                handleChange={this.handleTaskChange.bind(this)} \r\n                handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n        })\r\n        //update array of tasks in parent\r\n        this.props.onChange(this.taskObjects)\r\n\r\n    }\r\n    handleDeleteTask(id){\r\n        \r\n        //get array index of task to be deleted\r\n        const taskArrayIndex = this.findTaskById(this.taskObjects, id)\r\n        //remove the task from tasks array\r\n        this.taskObjects.splice(taskArrayIndex, 1)\r\n        //set state with the updated tasks\r\n        this.setState({\r\n            tasks : this.taskObjects.map(todoItem => <Task \r\n                key={todoItem.id} id={todoItem.id} \r\n                title={todoItem.name} \r\n                completed={todoItem.completed} \r\n                priority={todoItem.priority} \r\n                note={todoItem.note} \r\n                handleChange={this.handleTaskChange.bind(this)} \r\n                handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n        })\r\n        //update array of tasks in parent\r\n        this.props.onChange(this.taskObjects)\r\n    }\r\n    addNewTask(){\r\n       this.sortByUncompleted()\r\n        if(this.state.newTask.name !== \"\"){\r\n          this.taskObjects.push({\r\n              name: this.state.newTask.name,\r\n              id: this.taskObjects.length === 0 ? 1 : this.taskObjects[this.taskObjects.length-1].id + 1,\r\n              completed: false,\r\n              priority: this.state.newTask.priority,\r\n              note: this.state.newTask.note\r\n          })\r\n          console.log(this.taskObjects)\r\n\r\n          //update array of tasks in parent\r\n          this.props.onChange(this.taskObjects)\r\n\r\n          this.setState(prevState => ({\r\n            newTask : {\r\n                name: \"\",\r\n                priority: prevState.newTask.priority,\r\n                note: \"\"\r\n            },\r\n            tasks : this.taskObjects.map(todoItem => <Task \r\n                key={todoItem.id} \r\n                id={todoItem.id} \r\n                title={todoItem.name} \r\n                completed={todoItem.completed} \r\n                priority={todoItem.priority} \r\n                note={todoItem.note} \r\n                handleChange={this.handleTaskChange.bind(this)} \r\n                handleDeleteTask={this.handleDeleteTask.bind(this)}/>)\r\n        }))\r\n            \r\n        }\r\n         \r\n    }\r\n    render(){\r\n        return(\r\n            \r\n\r\n                <div className=\"main\">\r\n                    <Banner quote={this.state.randomQuote.quote} author={this.state.randomQuote.author} bgImg={\"url('https://source.unsplash.com/1600x400/?nature')\"} />\r\n\r\n                    <div className=\"add-task-container\">\r\n                            \r\n                        <input onChange={(e) => {this.setState({newTask: {...this.state.newTask, name: e.target.value}})}} value={this.state.newTask.name} placeholder=\"Add a new task!\"></input>\r\n                        <div className=\"note-container\">\r\n                            <p>Notes</p>\r\n                            <input type=\"text\" onChange={(e) => {this.setState({newTask: {...this.state.newTask, note: e.target.value}})}} value={this.state.newTask.note} placeholder=\"Enter task notes\" ></input>\r\n                        </div>\r\n                        <div className=\"priority-select-container\">\r\n                            <p>Priority</p>\r\n                            <select name=\"priority\" id=\"new-task-priority\" className=\"select-priority\" onChange={(e) => {this.setState({newTask: {...this.state.newTask, priority: e.target.value}})}}>\r\n                                <option value=\"Low\">Low</option>\r\n                                <option value=\"Medium\">Medium</option>\r\n                                <option value=\"High\">High</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <button className=\"hero-button\" onClick={this.addNewTask.bind(this)}>Add Task</button>\r\n                    </div>\r\n                    <div className=\"task-list\">\r\n                        \r\n                        {this.taskObjects.length === 0 ? <h1>Add some tasks to get started!</h1> : this.state.tasks}\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            \r\n            \r\n        )\r\n    }\r\n\r\n    \r\n  }\r\n\r\nexport default ToDoList","import React from \"react\"\r\n\r\n\r\nfunction Stats(){\r\n\r\n    return(<h1>Stats</h1>)\r\n}\r\n\r\nexport default Stats","import React from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\"\r\nimport Stats from \"./Stats\"\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  var taskObjects = [\r\n    {\r\n        name: \"do the dishes\",\r\n        id: 0,\r\n        completed: false,\r\n        priority: \"Low\",\r\n        note: \"dry them too\"\r\n    }, \r\n    {\r\n        name: \"pick up groceries\",\r\n        id: 1,\r\n        completed: false,\r\n        priority: \"Medium\",\r\n        note: \"dont forget avocados\"\r\n    },\r\n    {\r\n        name: \"learn react\",\r\n        id: 2,\r\n        completed: false,\r\n        priority: \"High\",\r\n        note: \"chapter 10\"\r\n    },\r\n    {\r\n      name: \"learn guitar\",\r\n      id: 3,\r\n      completed: false,\r\n      priority: \"Medium\",\r\n      note: \"Part 3\"\r\n  }\r\n\r\n]\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Router>\r\n        <Link to=\"/\"></Link>\r\n        <Link to=\"/stats\"></Link>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <ToDoList initialTasks={taskObjects} onChange={(tasks) => {taskObjects = tasks;\r\n            console.log(\"task objects from app.js: \" ,taskObjects)}}/>\r\n          </Route>\r\n          <Route exact path=\"/stats\">\r\n            <Stats />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}